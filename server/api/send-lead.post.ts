export default defineEventHandler(async (event) => {
  const config = useRuntimeConfig()
  const body = await readBody(event)

  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!body.name || !body.phone) {
      throw createError({
        statusCode: 400,
        statusMessage: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω'
      })
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const telegramMessage = `
üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞

üë§ –ò–º—è: ${body.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${body.phone}
üîß –£—Å–ª—É–≥–∞: ${body.service || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${body.message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
üåê –ò—Å—Ç–æ—á–Ω–∏–∫: ${body.source || '–õ–µ–Ω–¥–∏–Ω–≥'}
    `.trim()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    if (config.telegramBotToken && config.telegramChatId) {
      try {
        const telegramResponse = await $fetch(`https://api.telegram.org/bot${config.telegramBotToken}/sendMessage`, {
          method: 'POST',
          body: {
            chat_id: config.telegramChatId,
            text: telegramMessage,
            parse_mode: 'HTML'
          }
        })

        console.log('Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', telegramResponse)
      } catch (telegramError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramError)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      }
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
    if (config.googleSheetsId && config.googleServiceAccountKey) {
      try {
        await addToGoogleSheets(body, config)
        console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets')
      } catch (sheetsError) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets:', sheetsError)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      }
    }

    return {
      success: true,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error)
    
    return {
      success: false,
      message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏'
    }
  }
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets
async function addToGoogleSheets(data: any, config: any) {
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets
  // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
  console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Sheets:', {
    timestamp: new Date().toISOString(),
    name: data.name,
    phone: data.phone,
    service: data.service,
    message: data.message,
    source: data.source
  })
  
  // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets API
  // –ü—Ä–∏–º–µ—Ä:
  // const { google } = require('googleapis')
  // const auth = new google.auth.GoogleAuth({
  //   credentials: JSON.parse(config.googleServiceAccountKey),
  //   scopes: ['https://www.googleapis.com/auth/spreadsheets']
  // })
  // const sheets = google.sheets({ version: 'v4', auth })
  // await sheets.spreadsheets.values.append({
  //   spreadsheetId: config.googleSheetsId,
  //   range: '–õ–∏—Å—Ç1!A1',
  //   valueInputOption: 'RAW',
  //   requestBody: {
  //     values: [[
  //       new Date().toISOString(),
  //       data.name,
  //       data.phone,
  //       data.service,
  //       data.message,
  //       data.source
  //     ]]
  //   }
  // })
} 